@model WebApplication1.Models.ObstacleData
@{
    ViewData["Title"] = "Register Obstacle";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6">
            <div class="card shadow-sm rounded-4">
                <div class="card-body p-4">
                    <h1 class="h3 mb-2">Obstacle Registration</h1>
                    <p class="text-muted mb-4">Click the map to choose a location.</p>
                    @* Form posts to Obstacle/Dataform (POST). Tag Helpers so routing is easy. "AntiForgeryToken" security measure to prevent malicious POST requests *@
                    <form asp-controller="Obstacle" asp-action="DataForm" method="post" novalidate>
                        @Html.AntiForgeryToken()

                        @* If server-side validation fails, messages show here *@
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="mb-3">
                            <label asp-for="ObstacleName" class="form-label"></label>
                            <input asp-for="ObstacleName" class="form-control" placeholder="e.g., Fallen tree" />
                            <span asp-validation-for="ObstacleName" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ObstacleHeight" class="form-label"></label>
                            <input asp-for="ObstacleHeight" class="form-control" type="number" step="0.01" min="0" placeholder="e.g., 1,25" />
                            <span asp-validation-for="ObstacleHeight" class="text-danger"></span>
                        </div>

                        <div class="mb-4">
                            <label asp-for="ObstacleDescription" class="form-label"></label>
                            <textarea asp-for="ObstacleDescription" class="form-control" rows="3" placeholder="Brief description..."></textarea>
                            <span asp-validation-for="ObstacleDescription" class="text-danger"></span>
                        </div>

                        <!-- Map -->
                        <div class="mb-3">
                            @* Map container. Leaflet script below initializes the map and marker. *@
                            <div id="map" style="height: 320px; border-radius: 0.75rem;"></div>
                            <small class="text-muted d-block mt-1">
                                Click on the map to set location. Tiles © OpenStreetMap contributors.
                            </small>
                        </div>

                        <!-- Coordinates (readonly so users can click and set them via the map) -->
                        <div class="row g-3 mb-4">
                            <div class="col">
                                <label asp-for="Latitude" class="form-label"></label>
                                <input asp-for="Latitude" class="form-control" readonly />
                                <span asp-validation-for="Latitude" class="text-danger"></span>
                            </div>
                            <div class="col">
                                <label asp-for="Longitude" class="form-label"></label>
                                <input asp-for="Longitude" class="form-control" readonly />
                                <span asp-validation-for="Longitude" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg">Submit</button>
                            @* Explicit link avoids accidentally targeting Obstacle/Index *@
                            <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Back to Home</a>
                        </div>
                    </form>
                </div>
            </div>
            <p class="text-center text-muted mt-3 small">Map click sets coordinates. You can adjust by clicking again.</p>
        </div>
    </div>
</div>

@section Scripts {
    @* Renders the partial view that includes client-side validation scripts (e.g., jQuery Validate). 
       This enables unobtrusive validation for form fields using DataAnnotations. 
       Required for client-side validation to work in Razor Pages and MVC forms. *@
    <partial name="_ValidationScriptsPartial" />
    
    @* Leaflet is loaded from _Layout, here it is initialized. *@
    <script>
        // Default center: Oslo, can be changed, maybe add GEOLOCATION?
        const defaultCenter = [59.9139, 10.7522];
        const map = L.map('map').setView(defaultCenter, 12);

        // OpenStreetMap tiles with required attribution. (The actual map images)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // Marker we reuse
        let marker;

        // Helpers to format numbers in the user's locale (handles nb-NO commas)
        const fmt = new Intl.NumberFormat(navigator.language || 'nb-NO', { maximumFractionDigits: 6 });

        // Inputs generated by asp-for 
        const latInput = document.getElementById('Latitude');
        const lngInput = document.getElementById('Longitude');

        // If fields already have values (e.g., validation rerender), restore the marker
        (function initFromInputs() {
          const lat = latInput?.value?.replace(',', '.');
          const lng = lngInput?.value?.replace(',', '.');
          if (lat && lng && !isNaN(lat) && !isNaN(lng)) {
            const p = [parseFloat(lat), parseFloat(lng)];
            marker = L.marker(p).addTo(map);
            map.setView(p, 14);
          }
        })();

        // Set or move marker, update inputs
        function setPoint(latlng) {
          if (marker) {
            marker.setLatLng(latlng);
          } else {
            marker = L.marker(latlng).addTo(map);
          }
          // Format using locale so MVC binds decimals correctly under nb-NO
          latInput.value = fmt.format(latlng.lat);
          lngInput.value = fmt.format(latlng.lng);
        }

        // Click to set coordinates
        map.on('click', (e) => setPoint(e.latlng));

        
    </script>
}
